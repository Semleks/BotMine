const Nick = require("./System/GetNickName");
const Send = require("./System/Send");
const Type = require('./System/GetTypeChat');
const Text = require('./System/GetText');

class Bot {
    constructor() {
        this.getNick = new Nick();
        this.send = new Send();
        this.getType = new Type();
        this.getText = new Text();
    }
    MessageHandler(message, bot, botInfo, json)
    {
        let isRegister = false;
        const text = this.getText.getText(message).trim();
     
        if (botInfo.activatedPlugins.includes('Autojoin')) {
            if (message.includes(botInfo.nick + ' –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä')) {
                this.send.SendMessage('cmd', '/surv' + botInfo.pluginSettings.Autojoin.serverNumber.value, '', bot);
            }
        }

        if (botInfo.activatedPlugins.includes('Hi')) {
            if (message.includes('–ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ –∫–ª–∞–Ω—É.')) {
                this.send.SendMessage('clan', botInfo.pluginSettings.Hi.message.value, '', bot);
            }
        }

        if (botInfo.activatedPlugins.includes('Bye')) {
            if (message.includes('–ø–æ–∫–∏–Ω—É–ª –∫–ª–∞–Ω')) {
                this.send.SendMessage('private', botInfo.pluginSettings.Bye.message.value, message.split(" ")[1], bot);
            }
        }

        if (botInfo.activatedPlugins.includes('Pinger')) {
            if (message.includes(botInfo.nick)) {
                if (botInfo.pluginSettings.Pinger.token.value !== "" && botInfo.pluginSettings.Pinger.id.value !== "") {
                    fetch(`https://api.telegram.org/bot${botInfo.pluginSettings.Pinger.token.value}/sendMessage`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            chat_id: botInfo.pluginSettings.Pinger.id.value,
                            text: `üîî –ü–∏–Ω–≥! –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`,
                            parse_mode: "HTML"
                        })
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.ok) {
                                console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data.result.text);
                            } else {
                                console.error("–û—à–∏–±–∫–∞ Telegram:", data);
                            }
                        })
                        .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err));
                }
            }
        }
        
        if (botInfo.activatedPlugins.includes("Invite")) {
            if (text.startsWith("@invite")) {
                let typeChat = this.getType.getType(message);
                let nickName = this.getNick.getNick(message, json);
                this.send.SendMessage('cmd', '/clan invite ' + nickName, '', bot);
                try {
                    console.log(">>> [InviteCommand] –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–∞–π–º-–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)...");

                    const messagePromise = new Promise((resolve) => {
                        const listener = (message) => {
                            const messageText = message.toString();

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                            if (messageText.includes("–ø—Ä–∏–≥–ª–∞—Å–∏–ª")) {
                                bot.removeListener('message', listener); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–Ω–æ–≤–∞
                                setTimeout(() => {
                                    this.send.SendMessage(typeChat, botInfo.pluginSettings.Invite.successMessage.value, nickName, bot);
                                }, 1000)
                            } else if (messageText.includes("—É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç")) {
                                bot.removeListener('message', listener);
                                setTimeout(() => {
                                    this.send.SendMessage(typeChat, `–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ! –ò—Å–ø–æ–ª—å–∑—É–π: /clan leave`, nickName, bot);
                                }, 1000)
                            }
                        };
                        bot.on('message', listener);
                    });

                } catch (error) {
                    // –≠—Ç–∞ —á–∞—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª —Ç–∞–π–º-–∞—É—Ç
                    console.error(`>>> [FlyCommand] –û—à–∏–±–∫–∞: ${error.message}`);
                    this.send.SendMessage('private', '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', nickName, bot);
                }
            }
        }
        if (botInfo.activatedPlugins.includes("Fly")) {
            if (text.startsWith("@fly")) {
                let typeChat = this.getType.getType(message);
                let nickName = this.getNick.getNick(message, json);
                this.send.SendMessage('cmd', '/fly ' + nickName, '', bot);
                
                try {
                    console.log(">>> [FlyCommand] –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–∞–π–º-–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)...");

                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –Ω—É–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const messagePromise = new Promise((resolve) => {
                        const listener = (message) => {
                            const messageText = message.toString();

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                            if (messageText.includes("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º")) {
                                bot.removeListener('message', listener); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–Ω–æ–≤–∞
                                setTimeout(() => {
                                    this.send.SendMessage(this.getType.getType(message), botInfo.pluginSettings.Fly.successMessage.value, nickName, bot);
                                }, 1000)
                            } else if (messageText.includes("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞")) {
                                bot.removeListener('message', listener);
                                setTimeout(() => {
                                    this.send.SendMessage(this.getType.getType(message), `–ü–æ–¥–æ–∂–¥–∏—Ç–µ! –£ –º–µ–Ω—è –∫–¥ –Ω–∞ –∫–æ–º–∞–Ω–¥—É! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ ` + messageText.split("—á–µ—Ä–µ–∑")[1], nickName, bot);
                                }, 1000)
                            }
                        };
                        bot.on('message', listener);
                    });

                } catch (error) {
                    // –≠—Ç–∞ —á–∞—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª —Ç–∞–π–º-–∞—É—Ç
                    console.error(`>>> [FlyCommand] –û—à–∏–±–∫–∞: ${error.message}`);
                    this.send.SendMessage('private', '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', nick, bot);
                }
            }
        }
        
        if (message.includes('/login')) {
            if (botInfo.password === "") {
                console.log('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é!')
            } else {
                if (isRegister)
                    return;
                
                bot.chat('/login ' + botInfo.password);
                isRegister = true;
            }
        }

        if (message.includes('/reg')) {
            if (botInfo.password === "") {
                console.log('–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é!')
            } else {
                if (isRegister) 
                    return;
                bot.chat('/reg ' + botInfo.password + ' ' + botInfo.password);
                isRegister = true;
            }
        }
    }
}

module.exports = Bot;